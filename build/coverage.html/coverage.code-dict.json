{"/home/travis/build/npmtest/node-npmtest-elasticdump/test.js":"/* istanbul instrument in package npmtest_elasticdump */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-elasticdump/lib.npmtest_elasticdump.js":"/* istanbul instrument in package npmtest_elasticdump */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_elasticdump = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_elasticdump = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-elasticdump/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-elasticdump && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_elasticdump */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_elasticdump\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_elasticdump.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_elasticdump.rollup.js'] =\n            local.assetsDict['/assets.npmtest_elasticdump.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_elasticdump.__dirname + '/lib.npmtest_elasticdump.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-elasticdump/node_modules/elasticdump/elasticdump.js":"var util = require('util')\nvar http = require('http')\nvar https = require('https')\nvar path = require('path')\nvar EventEmitter = require('events').EventEmitter\nvar isUrl = require('./lib/is-url')\nvar vm = require('vm')\nvar addAuth = require('./lib/add-auth')\n\nvar elasticdump = function (input, output, options) {\n  var self = this\n\n  self.input = input\n  self.output = output\n  self.options = options\n\n  if (self.options.toLog === null || self.options.toLog === undefined) {\n    self.options.toLog = true\n  }\n\n  self.validationErrors = self.validateOptions()\n\n  if (options.maxSockets) {\n    self.log('globally setting maxSockets=' + options.maxSockets)\n    http.globalAgent.maxSockets = options.maxSockets\n    https.globalAgent.maxSockets = options.maxSockets\n  }\n\n  var InputProto\n  if (self.options.input && !self.options.inputTransport) {\n    if (isUrl(self.options.input)) {\n      self.inputType = 'elasticsearch'\n      if (self.options.httpAuthFile) {\n        self.options.input = addAuth(self.options.input, self.options.httpAuthFile)\n      }\n    } else {\n      self.inputType = 'file'\n    }\n\n    var inputOpts = {\n      index: self.options['input-index'],\n      headers: self.options['headers']\n    }\n    InputProto = require(path.join(__dirname, 'lib', 'transports', self.inputType))[self.inputType]\n    self.input = (new InputProto(self, self.options.input, inputOpts))\n  } else if (self.options.inputTransport) {\n    self.inputType = String(self.options.inputTransport)\n    InputProto = require(self.options.inputTransport)\n    var inputProtoKeys = Object.keys(InputProto)\n    self.input = (new InputProto[inputProtoKeys[0]](self, self.options.input, self.options['input-index']))\n  }\n\n  var OutputProto\n  if (self.options.output && !self.options.outputTransport) {\n    if (isUrl(self.options.output)) {\n      self.outputType = 'elasticsearch'\n      if (self.options.httpAuthFile) {\n        self.options.output = addAuth(self.options.output, self.options.httpAuthFile)\n      }\n    } else {\n      self.outputType = 'file'\n      if (self.options.output === '$') { self.options.toLog = false }\n    }\n\n    var outputOpts = {\n      index: self.options['output-index'],\n      headers: self.options['headers']\n    }\n    OutputProto = require(path.join(__dirname, 'lib', 'transports', self.outputType))[self.outputType]\n    self.output = (new OutputProto(self, self.options.output, outputOpts))\n  } else if (self.options.outputTransport) {\n    self.outputType = String(self.options.outputTransport)\n    OutputProto = require(self.options.outputTransport)\n    var outputProtoKeys = Object.keys(OutputProto)\n    self.output = (new OutputProto[outputProtoKeys[0]](self, self.options.output, self.options['output-index']))\n  }\n\n  if (self.options.type === 'data' && self.options.transform) {\n    var modificationScriptText = '(function(doc) { ' + self.options.transform + ' })'\n    self.modifier = new vm.Script(modificationScriptText).runInNewContext()\n  }\n}\n\nutil.inherits(elasticdump, EventEmitter)\n\nelasticdump.prototype.log = function (message) {\n  var self = this\n\n  if (typeof self.options.logger === 'function') {\n    self.options.logger(message)\n  } else if (self.options.toLog === true) {\n    self.emit('log', message)\n  }\n}\n\nelasticdump.prototype.validateOptions = function () {\n  var self = this\n  var validationErrors = []\n\n  var required = ['input', 'output']\n  required.forEach(function (v) {\n    if (!self.options[v]) {\n      validationErrors.push('`' + v + '` is a required input')\n    }\n  })\n\n  return validationErrors\n}\n\nelasticdump.prototype.dump = function (callback, continuing, limit, offset, totalWrites) {\n  var self = this\n\n  if (self.validationErrors.length > 0) {\n    self.emit('error', {errors: self.validationErrors})\n    callback(new Error('There was an error starting this dump'))\n  } else {\n    if (!limit) { limit = self.options.limit }\n    if (!offset) { offset = self.options.offset }\n    if (!totalWrites) { totalWrites = 0 }\n\n    if (continuing !== true) {\n      self.log('starting dump')\n\n      if (self.options.offset) {\n        self.log('Warning: offseting ' + self.options.offset + ' rows.')\n        self.log(\"  * Using an offset doesn't guarantee that the offset rows have already been written, please refer to the HELP text.\")\n      }\n      if (self.modifier) {\n        self.log('Will modify documents using this script: ' + self.options.transform)\n      }\n    }\n\n    self.input.get(limit, offset, function (err, data) {\n      if (err) { self.emit('error', err) }\n      if (!err || (self.options['ignore-errors'] === true || self.options['ignore-errors'] === 'true')) {\n        self.log('got ' + data.length + ' objects from source ' + self.inputType + ' (offset: ' + offset + ')')\n        if (self.modifier) {\n          for (var i = 0; i < data.length; i++) {\n            self.modifier(data[i])\n          }\n        }\n        self.output.set(data, limit, offset, function (err, writes) {\n          var toContinue = true\n\n          if (err) {\n            self.emit('error', err)\n            if (self.options['ignore-errors'] === true || self.options['ignore-errors'] === 'true') {\n              toContinue = true\n            } else {\n              toContinue = false\n            }\n          } else {\n            totalWrites += writes\n            if (data.length > 0) {\n              self.log('sent ' + data.length + ' objects to destination ' + self.outputType + ', wrote ' + writes)\n              offset = offset + data.length\n            }\n          }\n\n          if (data.length > 0 && toContinue) {\n            self.dump(callback, true, limit, offset, totalWrites)\n          } else if (toContinue) {\n            self.log('Total Writes: ' + totalWrites)\n            self.log('dump complete')\n            if (typeof callback === 'function') { callback(null, totalWrites) }\n          } else if (toContinue === false) {\n            self.log('Total Writes: ' + totalWrites)\n            self.log('dump ended with error (set phase)  => ' + String(err))\n            if (typeof callback === 'function') { callback(err, totalWrites) }\n          }\n        })\n      } else {\n        self.log('Total Writes: ' + totalWrites)\n        self.log('dump ended with error (get phase) => ' + String(err))\n        if (typeof callback === 'function') { callback(err, totalWrites) }\n      }\n    })\n  }\n}\n\nmodule.exports = elasticdump\n","/home/travis/build/npmtest/node-npmtest-elasticdump/node_modules/elasticdump/lib/is-url.js":"module.exports = isUrl\n\n// Naive attempt at detecting a url.\n// Should work for elasticdump use case, as file paths\n// should not start with http:// or https:// and urls should.\nfunction isUrl (url) {\n  if (!url) return false\n  url = url.toString()\n  return url.indexOf('http://') === 0 || url.indexOf('https://') === 0\n}\n","/home/travis/build/npmtest/node-npmtest-elasticdump/node_modules/elasticdump/lib/add-auth.js":"var fs = require('fs')\nvar ini = require('ini')\nvar url = require('url')\n\nmodule.exports = addAuth\n\nfunction addAuth (urlToAddAuth, authFile) {\n  var authConf = ini.parse(fs.readFileSync(authFile, 'utf-8'))\n  if (authConf.user && authConf.password) {\n    var authString = authConf.user + ':' + authConf.password\n  } else {\n    throw new Error('Malformed Auth File')\n  }\n  var urlObject = url.parse(urlToAddAuth)\n  if (!urlObject.auth) {\n    urlObject.auth = authString\n    urlToAddAuth = url.format(urlObject)\n  }\n  return urlToAddAuth\n}\n","/home/travis/build/npmtest/node-npmtest-elasticdump/node_modules/elasticdump/lib/aws4signer.js":"var aws4 = require('aws4')\nvar awscred = require('awscred')\n\nvar aws4signer = function (esRequest, parent) {\n  var useAwsCredentials = ((typeof parent.options.awsAccessKeyId === 'string') && (typeof parent.options.awsSecretAccessKey === 'string'))\n  var useAwsProfile = (typeof parent.options.awsIniFileProfile === 'string')\n\n  if (useAwsCredentials || useAwsProfile) {\n      // get aws required stuff from uri or url\n    var esURL = ''\n    if ((esRequest.uri !== undefined) && (esRequest.uri !== null)) {\n      esURL = esRequest.uri\n    } else if ((esRequest.url !== undefined) && (esRequest.url !== null)) {\n      esURL = esRequest.url\n    }\n\n    const url = require('url')\n    var urlObj = url.parse(esURL)\n\n    esRequest.headers = { 'host': urlObj.hostname }\n    esRequest.path = urlObj.path\n  }\n\n  if (useAwsCredentials) {\n    aws4.sign(esRequest, {\n      accessKeyId: parent.options.awsAccessKeyId,\n      secretAccessKey: parent.options.awsSecretAccessKey,\n      sessionToken: parent.options.sessionToken\n    })\n  } else if (useAwsProfile) {\n    var awsIniFileName = parent.options.awsIniFileName ? parent.options.awsIniFileName : 'config'\n    var creds = awscred.loadProfileFromIniFileSync({profile: parent.options.awsIniFileProfile}, awsIniFileName)\n    aws4.sign(esRequest, {\n      accessKeyId: creds.aws_access_key_id,\n      secretAccessKey: creds.aws_secret_access_key,\n      sessionToken: creds.aws_session_token\n    })\n  }\n}\n\nmodule.exports = aws4signer\n","/home/travis/build/npmtest/node-npmtest-elasticdump/node_modules/elasticdump/lib/jsonparser.js":"module.exports.parse = function (str) {\n  var result\n  try {\n    result = JSON.parse(str)\n  } catch (e) {\n    throw new Error('failed to parse json (message: \"' + e.message + '\") - source: ' + JSON.stringify(str))\n  }\n\n  return result\n}\n","/home/travis/build/npmtest/node-npmtest-elasticdump/node_modules/elasticdump/lib/parse-base-url.js":"function parseBaseURL (_url, _index) {\n  var host = _url.replace(/\\/+$/, '')\n  var hostParts = host.split('/')\n  var indexParts = (_index || '').split('/').filter(Boolean)\n  var index\n  var type\n\n  if (typeof _index === 'string') {\n    index = indexParts[0]\n    type = indexParts[1]\n  } else if (hostParts.length <= 3) {\n    //\n  } else if (hostParts.length > 4) {\n    host = hostParts.slice(0, -2).join('/')\n    index = hostParts[hostParts.length - 2]\n    type = hostParts[hostParts.length - 1]\n  } else {\n    host = hostParts.slice(0, -1).join('/')\n    index = hostParts[hostParts.length - 1]\n  }\n\n  return {\n    url: [host, index, type].filter(Boolean).join('/'),\n    host: host,\n    index: index,\n    type: type\n  }\n}\n\nmodule.exports = parseBaseURL\n","/home/travis/build/npmtest/node-npmtest-elasticdump/node_modules/elasticdump/lib/transports/elasticsearch.js":"var request = require('request')\nvar jsonParser = require('../jsonparser.js')\nvar parseBaseURL = require('../parse-base-url')\nvar aws4signer = require('../aws4signer')\nvar async = require('async')\n\nvar elasticsearch = function (parent, url, options) {\n  this.base = parseBaseURL(url, options.index)\n  this.parent = parent\n  this.lastScrollId = null\n  this.totalSearchResults = 0\n  this.elementsToSkip = 0\n  this.searchBody = this.parent.options.searchBody\n  this.ESversion = null\n  this.baseRequest = request.defaults({\n    headers: Object.assign({\n      'User-Agent': 'elasticdump'\n    }, options.headers)\n  })\n}\n// accept callback\n// return (error, arr) where arr is an array of objects\nelasticsearch.prototype.get = function (limit, offset, callback) {\n  var self = this\n  var type = self.parent.options.type\n  self.version('input', function (err) {\n    if (err) { return callback(err) }\n\n    if (type === 'data') {\n      self.getData(limit, offset, callback)\n    } else if (type === 'mapping') {\n      self.getMapping(limit, offset, callback)\n    } else if (type === 'analyzer') {\n      self.getSettings(limit, offset, callback)\n    } else {\n      callback(new Error('unknown type option'), null)\n    }\n  })\n}\n\nelasticsearch.prototype.version = function (prefix, callback) {\n  var self = this\n\n  if (self.ESversion) { return callback() }\n\n  self.baseRequest.get(self.base.host, function (err, response) {\n    if (err) { return callback(err) }\n    response = JSON.parse(response.body)\n\n    if (response.version) {\n      self.ESversion = response.version.number.split('.')[0]\n      self.parent.emit('debug', 'discovered elasticsearch ' + prefix + ' major version: ' + self.ESversion)\n    } else {\n      self.ESversion = 5\n      self.parent.emit('debug', 'cannot discover elasticsearch ' + prefix + ' major version, assuming: ' + self.ESversion)\n    }\n\n    if (!self.searchBody) {\n      if (self.ESversion >= 5) {\n        self.searchBody = { 'query': { 'match_all': {} }, 'stored_fields': ['*'], '_source': true }\n      } else {\n        self.searchBody = { 'query': { 'match_all': {} }, 'fields': ['*'], '_source': true }\n      }\n    }\n\n    callback()\n  })\n}\n\nelasticsearch.prototype.getMapping = function (limit, offset, callback) {\n  var self = this\n  if (self.gotMapping === true) {\n    callback(null, [])\n  } else {\n    var esRequest = {\n      'url': self.base.url + '/_mapping',\n      'method': 'GET'\n    }\n    aws4signer(esRequest, self.parent)\n\n    self.baseRequest.get(esRequest, function (err, response) {\n      self.gotMapping = true\n      var payload = []\n      if (!err) {\n        response = payload.push(JSON.parse(response.body))\n      }\n      callback(err, payload)\n    })\n  }\n}\n\nelasticsearch.prototype.getSettings = function (limit, offset, callback) {\n  var self = this\n  if (self.gotSettings === true) {\n    callback(null, [])\n  } else {\n    var esRequest = {\n      'url': self.base.url + '/_settings',\n      'method': 'GET'\n    }\n    aws4signer(esRequest, self.parent)\n\n    self.baseRequest.get(esRequest, function (err, response) {\n      self.gotSettings = true\n      var payload = []\n      if (!err) {\n        response = payload.push(response.body)\n      }\n      callback(err, payload)\n    })\n  }\n}\n\nelasticsearch.prototype.getData = function (limit, offset, callback) {\n  var searchRequest, self, uri\n  self = this\n  var searchBody = self.searchBody\n\n  if (offset >= self.totalSearchResults && self.totalSearchResults !== 0) {\n    callback(null, [])\n    return\n  }\n\n  if (self.lastScrollId !== null) {\n    scrollResultSet(self, callback)\n  } else {\n    // previously we used the scan/scroll method, but now we need to change the sort\n    // https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking_50_search_changes.html#_literal_search_type_scan_literal_removed\n\n    // if this is the first time we run, we need to log how many elements we should be skipping\n    if (!self.elementsToSkip) { self.elementsToSkip = offset }\n\n    uri = self.base.url +\n      '/' +\n      '_search?scroll=' +\n      self.parent.options.scrollTime +\n      '&from=' + offset\n\n    searchBody.size = limit\n\n    searchRequest = {\n      'uri': uri,\n      'method': 'GET',\n      'sort': [ '_doc' ],\n      'body': JSON.stringify(searchBody)\n    }\n    aws4signer(searchRequest, self.parent)\n\n    self.baseRequest.get(searchRequest, function requestResonse (err, response) {\n      if (err) {\n        callback(err, [])\n        return\n      } else if (response.statusCode !== 200) {\n        err = new Error(response.body)\n        callback(err, [])\n        return\n      }\n\n      var body = jsonParser.parse(response.body)\n      self.lastScrollId = body._scroll_id\n\n      if (self.lastScrollId === undefined) {\n        err = new Error('Unable to obtain scrollId; This tends to indicate an error with your index(es)')\n        callback(err, [])\n        return\n      }\n      self.totalSearchResults = body.hits.total\n\n      scrollResultSet(self, callback, body.hits.hits)\n    })\n  }\n}\n\n// accept arr, callback where arr is an array of objects\n// return (error, writes)\nelasticsearch.prototype.set = function (data, limit, offset, callback) {\n  var self = this\n  var type = self.parent.options.type\n  self.version('output', function (err) {\n    if (err) { return callback(err) }\n\n    if (type === 'data') {\n      self.setData(data, limit, offset, callback)\n    } else if (type === 'mapping') {\n      self.setMapping(data, limit, offset, callback)\n    } else if (type === 'analyzer') {\n      self.setAnalyzer(data, limit, offset, callback)\n    } else {\n      callback(new Error('unknown type option'), null)\n    }\n  })\n}\n\nelasticsearch.prototype.setMapping = function (data, limit, offset, callback) {\n  var self = this\n  if (self.haveSetMapping === true) {\n    callback(null, 0)\n  } else {\n    var esRequest = {\n      'url': self.base.url,\n      'method': 'PUT'\n    }\n    aws4signer(esRequest, self.parent)\n\n    self.baseRequest.put(esRequest, function (err, response) { // ensure the index exists\n      if (err) { return callback(err) }\n\n      try {\n        data = data[0]\n      } catch (e) {\n        return callback(e)\n      }\n      var started = 0\n      var count = 0\n      for (var index in data) {\n        var mappings = data[index]['mappings']\n        var sortedMappings = []\n\n        for (var key in mappings) {\n          if (mappings[key]._parent) {\n            sortedMappings = [{key: key, data: mappings[key]}].concat(sortedMappings)\n          } else {\n            sortedMappings.push({key: key, data: mappings[key]})\n          }\n        }\n\n        async.eachSeries(sortedMappings, function (set, done) {\n          var url = self.base.url + '/' + encodeURIComponent(set.key) + '/_mapping'\n          var payload = {\n            url: url,\n            method: 'PUT',\n            body: JSON.stringify(set.data),\n            timeout: self.parent.options.timeout\n          }\n          aws4signer(payload, self.parent)\n\n          started++\n          count++\n\n          self.baseRequest.put(payload, function (err, response) {\n            started--\n            done(null) // we always call this with no error because this is a dirty hack and we are already handling errors...\n            if (!err) {\n              var bodyError = jsonParser.parse(response.body).error\n              if (bodyError) { err = bodyError }\n            }\n            if (started === 0) {\n              self.haveSetMapping = true\n              callback(err, count)\n            }\n          })\n        })\n      }\n    })\n  }\n}\n\nelasticsearch.prototype.setAnalyzer = function (data, limit, offset, callback) {\n  var self = this\n  var updateAnalyzer = function (err, response) {\n    if (err) { return callback(err) }\n\n    try {\n      data = jsonParser.parse(data[0])\n    } catch (e) {\n      return callback(e)\n    }\n    var started = 0\n    var count = 0\n    for (var index in data) {\n      var settings = data[index]['settings']\n      for (var key in settings) { // iterate through settings\n        var setting = {}\n        setting[key] = settings[key]\n        var url = self.base.url + '/_settings'\n        started++\n        count++\n\n        // ignore all other settings other than 'analysis'\n        for (var p in setting[key]) { // iterate through index\n          if (p !== 'analysis') { // remove everything not 'analysis'\n            delete setting[key][p]\n          }\n        }\n\n        var esRequest = {\n          'url': self.base.url + '/_close', // close the index\n          'method': 'POST',\n          'timeout': self.parent.options.timeout\n        }\n        aws4signer(esRequest, self.parent)\n\n        self.baseRequest.post(esRequest, function (err, response, body) {\n          if (!err) {\n            var bodyError = jsonParser.parse(response.body).error\n            if (bodyError) {\n              err = bodyError\n            }\n            var payload = {\n              url: url,\n              method: 'PUT',\n              body: JSON.stringify(setting),\n              timeout: self.parent.options.timeout\n            }\n            aws4signer(payload, self.parent)\n\n            self.baseRequest.put(payload, function (err, response) { // upload the analysis settings\n              started--\n              if (!err) {\n                var bodyError = jsonParser.parse(response.body).error\n                if (bodyError) {\n                  err = bodyError\n                }\n              } else {\n                callback(err, count)\n              }\n              if (started === 0) {\n                self.haveSetAnalyzer = true\n                var esRequest = {\n                  'url': self.base.url + '/_open', // open the index\n                  'method': 'POST',\n                  'timeout': self.parent.options.timeout\n                }\n                aws4signer(esRequest, self.parent)\n\n                self.baseRequest.post(esRequest, function (err, response) {\n                  if (!err) {\n                    var bodyError = jsonParser.parse(response.body).error\n                    if (bodyError) {\n                      err = bodyError\n                    }\n                  }\n                  callback(err, count)\n                })\n              }\n            })\n          } else {\n            callback(err, count)\n          }\n        })\n      }\n    }\n  }\n  if (self.haveSetAnalyzer === true) {\n    callback(null, 0)\n  } else {\n    var esRequest = {\n      'url': self.base.url,\n      'method': 'PUT'\n    }\n    aws4signer(esRequest, self.parent)\n\n    self.baseRequest.put(esRequest, function (err, response) { // ensure the index exists\n      if (err) { return callback(err) }\n\n      // use cluster health api to check if the index is ready\n      esRequest = {\n        'url': self.base.host + '/_cluster/health/' + self.base.index + '?wait_for_status=green',\n        'method': 'GET'\n      }\n      aws4signer(esRequest, self.parent)\n      self.baseRequest.get(esRequest, updateAnalyzer)\n    })\n  }\n}\n\nelasticsearch.prototype.setData = function (data, limit, offset, callback) {\n  if (data.length === 0) { return callback(null, 0) }\n\n  var self = this\n  var extraFields = ['routing', 'parent', 'timestamp', 'ttl']\n  var writes = 0\n\n  var thisUrl = self.base.url + '/_bulk'\n\n  var payload = {\n    url: thisUrl,\n    body: '',\n    method: 'PUT',\n    timeout: self.parent.options.timeout\n  }\n\n  data.forEach(function (elem) {\n    var actionMeta = { index: {} }\n    // actionMeta._index = elem._index; // Not setting _index should use the one defined in URL.\n    actionMeta.index._type = elem._type\n    actionMeta.index._id = elem._id\n\n    extraFields.forEach(function (field) {\n      if (elem.fields) {\n        if (elem.fields[field]) {\n          actionMeta.index[field] = elem.fields[field]\n        }\n        if (elem.fields['_' + field]) {\n          actionMeta.index[field] = elem.fields['_' + field]\n        }\n      } else {\n        if (elem[field]) {\n          actionMeta.index[field] = elem[field]\n        }\n        if (elem['_' + field]) {\n          actionMeta.index[field] = elem['_' + field]\n        }\n      }\n    })\n\n    payload.body += JSON.stringify(actionMeta) + '\\n'\n    payload.body += JSON.stringify(elem._source) + '\\n'\n  })\n\n  self.parent.emit('debug', 'thisUrl: ' + thisUrl + ', payload.body: ' + JSON.stringify(payload.body))\n\n  aws4signer(payload, self.parent)\n  self.baseRequest.put(payload, function (err, response) {\n    if (err) { return callback(err) }\n\n    try {\n      var r = jsonParser.parse(response.body)\n      if (r.items !== null && r.items !== undefined) {\n        if (r.ok === true) {\n          writes = data.length\n        } else {\n          r.items.forEach(function (item) {\n            if (item['index'].status < 400) {\n              writes++\n            } else {\n              console.error(item['index'])\n            }\n          })\n        }\n      }\n    } catch (e) { return callback(e) }\n\n    self.reindex(function (err) {\n      return callback(err, writes)\n    })\n  })\n}\n\nelasticsearch.prototype.del = function (elem, callback) {\n  var self = this\n  var thisUrl = self.base.url + '/' + encodeURIComponent(elem._type) + '/' + encodeURIComponent(elem._id)\n\n  self.parent.emit('debug', 'deleteUrl: ' + thisUrl)\n  var esRequest = {\n    'url': thisUrl,\n    'method': 'DELETE'\n  }\n  aws4signer(esRequest, self.parent)\n\n  self.baseRequest.del(esRequest, function (err, response, body) {\n    if (typeof callback === 'function') {\n      callback(err, response, body)\n    }\n  })\n}\n\nelasticsearch.prototype.reindex = function (callback) {\n  var self = this\n\n  var esRequest = {\n    'url': self.base.url + '/_refresh',\n    'method': 'POST'\n  }\n  aws4signer(esRequest, self.parent)\n\n  self.baseRequest.post(esRequest, function (err, response) {\n    callback(err, response)\n  })\n}\n\nexports.elasticsearch = elasticsearch\n\n// ///////////\n// HELPERS //\n// ///////////\n\n/**\n * Posts requests to the _search api to fetch the latest\n * scan result with scroll id\n * @param self\n * @param callback\n */\nfunction scrollResultSet (self, callback, loadedHits) {\n  var body\n\n  if (loadedHits && loadedHits.length > 0) {\n    // are we skipping and we have hits?\n    if (self.elementsToSkip > 0) {\n      while (loadedHits.length > 0 && self.elementsToSkip > 0) {\n        loadedHits.splice(0, 1)\n        self.elementsToSkip--\n      }\n    }\n\n    if (loadedHits.length > 0) {\n      if (self.parent.options.delete === true) {\n        var started = 0\n        loadedHits.forEach(function (elem) {\n          started++\n          self.del(elem, function () {\n            started--\n            if (started === 0) {\n              self.reindex(function (err) {\n                return callback(err, loadedHits)\n              })\n            }\n          })\n        })\n      } else {\n        return callback(null, loadedHits)\n      }\n    } else {\n      return scrollResultSet(self, callback)\n    }\n  } else {\n    var scrollRequest = {\n      'uri': self.base.host + '/_search' + '/scroll?scroll=' + self.parent.options.scrollTime,\n      'method': 'GET',\n      'body': self.lastScrollId\n    }\n    aws4signer(scrollRequest, self.parent)\n\n    self.baseRequest.get(scrollRequest, function requestResonse (err, response) {\n      if (err) {\n        callback(err, [])\n        return\n      }\n\n      self.parent.emit('debug', 'scrollRequest: ' + JSON.stringify(scrollRequest))\n      self.parent.emit('debug', 'body: ' + JSON.stringify(response.body))\n\n      if (err === null && response.statusCode !== 200) {\n        err = new Error(response.body)\n        callback(err, [])\n        return\n      }\n\n      try {\n        body = jsonParser.parse(response.body)\n      } catch (e) {\n        e.message = e.message + ' | Cannot Parse: ' + response.body\n        callback(e, [])\n        return\n      }\n\n      self.lastScrollId = body._scroll_id\n      var hits = body.hits.hits\n\n      if (self.parent.options.delete === true && hits.length > 0) {\n        var started = 0\n        hits.forEach(function (elem) {\n          started++\n          self.del(elem, function () {\n            started--\n            if (started === 0) {\n              self.reindex(function (err) {\n                if (hits.length === 0) {\n                  self.lastScrollId = null\n                }\n                callback(err, hits)\n              })\n            }\n          })\n        })\n      } else {\n        if (hits.length === 0) {\n          self.lastScrollId = null\n        }\n\n        // are we skipping and we have hits?\n        if (self.elementsToSkip > 0 && hits.length > 0) {\n          while (hits.length > 0 && self.elementsToSkip > 0) {\n            hits.splice(0, 1)\n            self.elementsToSkip--\n          }\n\n          if (hits.length > 0) {\n            // we have some hits after skipping, lets callback\n            return callback(err, hits)\n          } else {\n            // we skipped, but now we don't have any hits,\n            // scroll again for more data if possible\n            return scrollResultSet(self, callback)\n          }\n        } else {\n          // not skipping or done skipping\n          return callback(err, hits)\n        }\n      }\n    })\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-elasticdump/node_modules/elasticdump/lib/transports/file.js":"var util = require('util')\nvar JSONStream = require('JSONStream')\nvar fs = require('fs')\nvar endOfLine = require('os').EOL\n\nvar file = function (parent, file, options) {\n  this.options = options\n  this.parent = parent\n  this.file = file\n  this.lineCounter = 0\n  this.localLineCounter = 0\n  this.stream = null\n  this.elementsToSkip = 0\n}\n\n// accept callback\n// return (error, arr) where arr is an array of objects\nfile.prototype.get = function (limit, offset, callback) {\n  var self = this\n  self.thisGetLimit = limit\n  self.thisGetCallback = callback\n  self.localLineCounter = 0\n\n  if (self.lineCounter === 0) {\n    self.setupGet(offset)\n  } else {\n    self.metaStream.resume()\n  }\n\n  if (!self.metaStream.readable) {\n    self.completeBatch(null, self.thisGetCallback)\n  }\n}\n\nfile.prototype.setupGet = function (offset) {\n  var self = this\n\n  self.bufferedData = []\n  self.stream = JSONStream.parse()\n\n  if (!self.elementsToSkip) { self.elementsToSkip = offset }\n\n  if (self.file === '$') {\n    self.metaStream = process.stdin\n  } else {\n    self.metaStream = fs.createReadStream(self.file)\n  }\n\n  self.stream.on('data', function (elem) {\n    if (self.elementsToSkip > 0) {\n      self.elementsToSkip--\n    } else {\n      self.bufferedData.push(elem)\n    }\n\n    self.localLineCounter++\n    self.lineCounter++\n\n    if (self.localLineCounter === self.thisGetLimit) {\n      self.completeBatch(null, self.thisGetCallback)\n    }\n  })\n\n  self.stream.on('error', function (e) {\n    self.parent.emit('error', e)\n  })\n\n  self.stream.on('end', function () {\n    self.completeBatch(null, self.thisGetCallback, true)\n  })\n\n  self.metaStream.pipe(self.stream)\n}\n\nfile.prototype.completeBatch = function (error, callback, streamEnded) {\n  var self = this\n  var data = []\n\n  self.metaStream.pause()\n\n  if (error) { return callback(error) }\n\n  // if we are skipping, have no data, and there is more to read we should continue on\n  if (!streamEnded && self.elementsToSkip > 0 && self.bufferedData.length === 0) {\n    return self.metaStream.resume()\n  }\n\n  while (self.bufferedData.length > 0) {\n    data.push(self.bufferedData.pop())\n  }\n\n  return callback(null, data)\n}\n\n// accept arr, callback where arr is an array of objects\n// return (error, writes)\nfile.prototype.set = function (data, limit, offset, callback) {\n  var self = this\n  var error = null\n  var targetElem\n\n  self.lineCounter = 0\n\n  if (!self.stream) {\n    if (self.file === '$') {\n      self.stream = process.stdout\n    } else {\n      // TODO: add options to append and replace the file\n      if (fs.existsSync(self.file)) {\n        return callback(new Error('File `' + self.file + '` already exists, quitting'))\n      } else {\n        self.stream = fs.createWriteStream(self.file)\n      }\n    }\n  }\n\n  if (data.length === 0) {\n    if (self.file === '$') {\n      process.nextTick(callback(null, self.lineCounter))\n    } else {\n      self.stream.on('close', function () {\n        delete self.stream\n        return callback(null, self.lineCounter)\n      })\n\n      self.stream.end()\n    }\n  } else {\n    data.forEach(function (elem) {\n      // Select _source if sourceOnly\n      if (self.parent.options.sourceOnly === true) {\n        targetElem = elem._source\n      } else {\n        targetElem = elem\n      }\n\n      if (self.parent.options.format && self.parent.options.format.toLowerCase() === 'human') {\n        self.log(util.inspect(targetElem, false, 10, true))\n      } else {\n        self.log(JSON.stringify(targetElem))\n      }\n\n      self.lineCounter++\n    })\n\n    process.nextTick(function () {\n      callback(error, self.lineCounter)\n    })\n  }\n}\n\nfile.prototype.log = function (line) {\n  this.stream.write(line + endOfLine)\n}\n\nexports.file = file\n","/home/travis/build/npmtest/node-npmtest-elasticdump/node_modules/elasticdump/lib/transports/_template.js":"var template = function (parent, options) {\n  this.options = options\n  this.parent = parent\n}\n\n// accept callback\n// return (error, arr) where arr is an array of objects\ntemplate.prototype.get = function (limit, offset, callback) {\n  var error = null\n  var data = []\n\n  callback(error, data)\n}\n\n// accept arr, callback where writes is a count of objects written\n// return (error, writes)\ntemplate.prototype.set = function (data, limit, offset, callback) {\n  var error = null\n  var writes = 0\n\n  callback(error, writes)\n}\n\nexports.template = template\n"}